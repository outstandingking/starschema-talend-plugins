<%@ jet
	imports="
	java.util.Arrays
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.utils.TalendTextUtils
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
%>


<%
boolean startIterate = false;
String firstDataConnName = "table_content";

String client = ElementParameterParser.getValue(node, "__CLIENT__");
String userid = ElementParameterParser.getValue(node, "__USERID__");
String password = ElementParameterParser.getValue(node, "__PASSWORD__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String hostname = ElementParameterParser.getValue(node, "__HOSTNAME__");
String systemnumber = ElementParameterParser.getValue(node, "__SYSTEMNUMBER__");

String serverType = ElementParameterParser.getValue(node,"__SERVERTYPE__");
String systemId = ElementParameterParser.getValue(node,"__SYSTEMID__");
String groupName = ElementParameterParser.getValue(node,"__GROUPNAME__");


// PLSAP related	
String tableName = ElementParameterParser.getValue(node, "__SAP_TABLE_NAME__");	
String functionName = ElementParameterParser.getValue(node, "__SAP_FUNCTION__");
String sapOutputDirectory = ElementParameterParser.getValue(node, "__SAP_OUTPUT_DIRECTORY__");
String whereCondition = ElementParameterParser.getValue(node, "__WHERE_CONDITION__");

boolean useCompression = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESSION__"));


List<Map<String, String>>  sapTableColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SAP_TABLE_COLUMNS__");

boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>

/* Connect to SAP */
com.sap.conn.jco.JCoDestination destination = null;
try {
	com.starschema.jco.utils.SapCustomDataProvider customDataProvider = new com.starschema.jco.utils.SapCustomDataProvider (
		<%= client %>, <%= language %>, <%= systemnumber %>, <%=hostname %>, <%= userid %>, <%= password %> 
	);

	// Register customDataProvider
	com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(customDataProvider);
	// Connect to SAP server
	destination = com.sap.conn.jco.JCoDestinationManager.getDestination(com.starschema.jco.utils.SapCustomDataProvider.SAP_SERVER);
	
} catch (Exception e_<%=cid%>) {
    throw new RuntimeException(e_<%=cid%>.getMessage());
}

/* switch to JCO Context */
try { 
		com.sap.conn.jco.JCoContext.begin(destination);
		System.out.println(destination.getAttributes());
<%
  for (int i = 0; i < sapTableColumns.size(); i++) {
    Map<String, String> line = sapTableColumns.get(i);
   	 %>
   	 	System.out.println("SAP Column: " + <%= line.get("FIELD_NAME") %> );
   	 <%
  }
%>

System.out.println("SAP Table: " + <%= tableName %> );
