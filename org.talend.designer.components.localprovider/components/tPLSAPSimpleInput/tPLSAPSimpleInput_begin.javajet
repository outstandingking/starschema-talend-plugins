<%@ jet
	imports="
	java.util.Arrays
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.utils.TalendTextUtils
	"
%>
<%
	class AssignUtil{
            	public void gen(IConnection justConn,IMetadataColumn justColumn,String value,String paramName){
            		
            		String typeToGenerate = JavaTypesManager.getTypeToGenerate(justColumn.getTalendType(), justColumn.isNullable());
            		JavaType javaType = JavaTypesManager.getJavaTypeFromId(justColumn.getTalendType());
    				String patternValue = justColumn.getPattern() == null || justColumn.getPattern().trim().length() == 0 ? null : justColumn.getPattern();
    				
    				if(javaType == JavaTypesManager.DATE) {
					%>
					//
						<%=justConn.getName() %>.<%=justColumn.getLabel() %> = ParserUtils.parseTo_Date(<%=value%>.getString(<%=paramName%>),<%=patternValue%>);
					<%
					} else if(javaType == JavaTypesManager.OBJECT) {
					%>
						<%=justConn.getName() %>.<%=justColumn.getLabel() %> = <%=value%>.getString(<%=paramName%>);
					<%
					} else{
					%>
						<%=justConn.getName() %>.<%=justColumn.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(<%=value%>.getString(<%=paramName%>));
					<%
					}
            	}
            
            }
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
%>

<%	
	IConnection firstDataConn = null;
	List<IMetadataColumn> firstColumnList = null;

	//1. get first DATA Link
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();	
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				firstDataConn = conn;
				break;
			}
		}
	}

	//2. get first columnList (with real columns data) 	
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = null;
	if ( metadatas != null && metadatas.size() > 0 ) {
		metadata = metadatas.get(0);
		if(metadata != null){
			firstColumnList = metadata.getListColumns(); 
			if ( firstColumnList == null || firstColumnList.size() == 0 ) {
				firstColumnList = null;
			}
		}
	}
	
	//3. check the config Link and Schema
	if(firstDataConn == null || firstColumnList == null)
	{
		return "";
	}
%>

<%         
List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");

List<Map<String, String>> tempSchemaBufferBaseOnLink = new ArrayList<Map<String, String>>();
//filter some values for schemas, because it should be base on Connection, because some Connection maybe deactivate.
if(conns != null && conns.size() > 0){
	for(IConnection conn : conns){
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            for(Map<String, String> schemaMap : schemas) {
            	String schemaName = schemaMap.get("SCHEMA");		
    			if(schemaName.equals(conn.getName())){
					tempSchemaBufferBaseOnLink.add(schemaMap);
    			}
    		}	
		}
	}
}
schemas =  tempSchemaBufferBaseOnLink;


%>

<%
boolean startIterate = false;
String firstDataConnName = firstDataConn.getName();

String client = ElementParameterParser.getValue(node, "__CLIENT__");
String userid = ElementParameterParser.getValue(node, "__USERID__");
String password = ElementParameterParser.getValue(node, "__PASSWORD__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String hostname = ElementParameterParser.getValue(node, "__HOSTNAME__");
String systemnumber = ElementParameterParser.getValue(node, "__SYSTEMNUMBER__");

String serverType = ElementParameterParser.getValue(node,"__SERVERTYPE__");
String systemId = ElementParameterParser.getValue(node,"__SYSTEMID__");
String groupName = ElementParameterParser.getValue(node,"__GROUPNAME__");

String functionName = ElementParameterParser.getValue(node, "__SAP_FUNCTION__");

// STARSCHEMA LTD.	

//String tableName = ElementParameterParser.getValue(node, "__SAP_TABLE_NAME__");	

String sapOutputDirectory = ElementParameterParser.getValue(node, "__SAP_OUTPUT_DIRECTORY__");

//String whereCondition = ElementParameterParser.getValue(node, "__WHERE_CONDITION__");

//boolean useCompression = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESSION__"));

//List<Map<String>> sapTableColumns = (List<Map<String>>)ElementParameterParser.getObjectValue(node, "__SAP_TABLE_COLUMNS__");
List<String> sapTableColumns = (List<String>)ElementParameterParser.getObjectValue(node, "__SAP_TABLE_COLUMNS__");


String iterate_out_type = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TYPE__");
String iterate_out_tablename = ElementParameterParser.getValue(node, "__SAP_ITERATE_OUT_TABLENAME__");
String [] iterate_out_multi = iterate_out_tablename.split(",");
for(int k = 0; k < iterate_out_multi.length; k++){
	if(iterate_out_multi[k] != null){
		iterate_out_multi[k] = iterate_out_multi[k].trim();
	}
}
List<String> iterate_out_multi_list = Arrays.asList(iterate_out_multi);

boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>

	  	  com.sap.mw.jco.JCO.Client client_<%=cid %> = null;
try{
<%if(useExistingConn){%>	    
	  client_<%=cid %> = (com.sap.mw.jco.JCO.Client)globalMap.get("conn_<%=connection %>");	
<%}else{%>
	<%if("ApplicationServer".equals(serverType)){%>
	  //Create a client connection to a dedicated R/3 system
	  client_<%=cid %> = com.sap.mw.jco.JCO.createClient( <%=client %>,      // SAP client
					            				 <%=userid %>,   	// userid
					            				 <%=password %>,    // password
					            				 <%=language %>,    // language
					            				 <%=hostname %>,    // host name
					            				 <%=systemnumber %> );      // system number
	<%}else{%>
	//Create a client connection to Message Server 
	client_<%=cid %> = com.sap.mw.jco.JCO.createClient( <%=client %>,      // SAP client
			            				 <%=userid %>,   	// userid
			            				 <%=password %>,    // password
			            				 <%=language %>,    // language
			            				 <%=hostname %>,    // host name
			            				 <%=systemId %>,    // system ID,defined in sapmsg.ini
			            				 <%=groupName%> );  // group name    
	<%}%>
	        				 
		// Open the connection
		client_<%=cid %>.connect();
<%}%>      
        com.sap.mw.jco.IRepository repository_<%=cid %> = com.sap.mw.jco.JCO.createRepository("REPOSITORY", client_<%=cid %>);

        com.sap.mw.jco.IFunctionTemplate functionTemplate_<%=cid %> = repository_<%=cid %>.getFunctionTemplate(<%=functionName %>);
        
		if(functionTemplate_<%=cid %> == null){
			throw new RuntimeException("The RFC can't support the function: " + <%=functionName %> + ".");
		}        

        com.sap.mw.jco.JCO.Function function_<%=cid %> = functionTemplate_<%=cid %>.getFunction();

        com.sap.mw.jco.JCO.ParameterList importParameterList_<%=cid %> = function_<%=cid %>.getImportParameterList();
        com.sap.mw.jco.JCO.ParameterList exportParameterList_<%=cid %> = function_<%=cid %>.getExportParameterList();
        com.sap.mw.jco.JCO.ParameterList tableParameterList_<%=cid %> = function_<%=cid %>.getTableParameterList();
        
        com.sap.mw.jco.JCO.Structure input_structure_<%=cid %>=null;
        com.sap.mw.jco.JCO.Table input_table_<%=cid %>=null; 
        com.sap.mw.jco.JCO.Table  table_input_<%=cid %>=null; 
        
        Object isListObject_<%=cid%>=null;
        
<%
			Map<String,String> input_single_map = new HashMap<String,String>();
			Map<String,Map<String,String>> input_structure_map = new HashMap<String,Map<String,String>>();
			Map<String,Map<String,String>> input_table_map = new HashMap<String,Map<String,String>>();
			Map<String,Map<String,String>> table_input_map = new HashMap<String,Map<String,String>>();
			Map<String,String> table_map = null;

			List<Map<String, String>> sapMapping_input = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MAPPING_INPUT__");            
            
			for(Map<String, String> configRow : sapMapping_input){
			
				String parameterType = configRow.get("SAP_PARAMETER_TYPE");
				if("table_input".equals(parameterType)) { 
					if(table_input_map.get(configRow.get("SAP_TABLE_NAME"))==null){
						table_map = new HashMap<String,String>();
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
						table_input_map.put(configRow.get("SAP_TABLE_NAME"),table_map);
					}else{
						table_map = table_input_map.get(configRow.get("SAP_TABLE_NAME"));
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
					}
				}else if("input_table".equals(parameterType)){
					if(input_table_map.get(configRow.get("SAP_TABLE_NAME"))==null){
						table_map = new HashMap<String,String>();
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
						input_table_map.put(configRow.get("SAP_TABLE_NAME"),table_map);
					}else{
						table_map = input_table_map.get(configRow.get("SAP_TABLE_NAME"));
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
					}
				}else if("input_structure".equals(parameterType)){
					if(input_structure_map.get(configRow.get("SAP_TABLE_NAME"))==null){
						table_map = new HashMap<String,String>();
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
						input_structure_map.put(configRow.get("SAP_TABLE_NAME"),table_map);
					}else{
						table_map = input_structure_map.get(configRow.get("SAP_TABLE_NAME"));
						table_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));
					}
				}else{
					input_single_map.put(configRow.get("SAP_PARAMETER_NAME"),configRow.get("SAP_PARAMETER_VALUE"));	
				}
				
				if(true){
				System.out.println(configRow.get("SCHEMA_COLUMN") + " " + configRow.get("SAP_PARAMETER_TYPE") + " " + configRow.get("SAP_TABLE_NAME") + " " + configRow.get("SAP_PARAMETER_NAME") + " " + configRow.get("SAP_PARAMETER_VALUE")+ " " + configRow.get("SAP_TABLE_ROWNUMBER"));
				}
			}
			
			if(!input_single_map.isEmpty()){
				for(Object pName:input_single_map.keySet()){
%>
				importParameterList_<%=cid %>.setValue(<%=input_single_map.get(pName)%>,<%=pName.toString()%>); // "input_single"		
<%
				}
			}
			if(!input_structure_map.isEmpty()){
				for(Object tableName:input_structure_map.keySet()){
%>
				input_structure_<%=cid %> = importParameterList_<%=cid %>.getStructure(<%=tableName.toString()%>);					
<%
					table_map = (HashMap<String,String>)input_structure_map.get(tableName);
					for(Object ColName: table_map.keySet()){
%>
				input_structure_<%=cid %>.setValue(<%=table_map.get(ColName)%>,<%=ColName.toString()%>);	// "input_structure"						
<%
					}
				}
			}
			if(!input_table_map.isEmpty()){
				String tName = "";
				String cName = "";
				for(Object tableName:input_table_map.keySet()){
					tName = TalendTextUtils.removeQuotes(tableName.toString());
					table_map = (HashMap<String,String>)input_table_map.get(tableName);
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
						String multiValues = table_map.get(colName);
%>
						java.util.List list_<%=tName%>_<%=cName%>_<%=cid%> = new java.util.ArrayList();				
<%
						if(multiValues != null && multiValues.indexOf(",") != -1){
    						String[] values = multiValues.split(",");
    						for(int k = 0; k < values.length; k++){
%>
						list_<%=tName%>_<%=cName%>_<%=cid%>.add(<%=values[k]%>);
<%
    						}
    					}else{
%>
						isListObject_<%=cid%> = <%=table_map.get(colName)%>;
						if(isListObject_<%=cid%> instanceof java.util.List){
							list_<%=tName%>_<%=cName%>_<%=cid%>.addAll((java.util.List)isListObject_<%=cid%>);
						}else{
							list_<%=tName%>_<%=cName%>_<%=cid%>.add(<%=table_map.get(colName)%>);
						}
<%						
    					}
					}
%>
					int rowSize_<%=tName%>_<%=cid%> = 0;
<% 
					boolean isFirstRow = true;
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
						if(isFirstRow){ 
%>
						rowSize_<%=tName%>_<%=cid%> = list_<%=tName%>_<%=cName%>_<%=cid%>.size();														
<%
							isFirstRow = false;
						}else{
%>
						if(rowSize_<%=tName%>_<%=cid%>!=list_<%=tName%>_<%=cName%>_<%=cid%>.size()){
							throw new RuntimeException("The row count of column: <%=cName%> in table: <%=tName%> not equals others, please make sure the row count of every columns equal.");
						}					
<%
						}
					}
%>
					input_table_<%=cid %> = importParameterList_<%=cid %>.getTable(<%=tableName%>);
					input_table_<%=cid %>.appendRows(rowSize_<%=tName%>_<%=cid%>);
					input_table_<%=cid %>.firstRow();
					for(int rowNum_<%=tName%>=0;rowNum_<%=tName%><rowSize_<%=tName%>_<%=cid%>;rowNum_<%=tName%>++){			
<%
					
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
%>
						input_table_<%=cid %>.setValue(list_<%=tName%>_<%=cName%>_<%=cid%>.get(rowNum_<%=tName%>),<%=colName.toString()%>);// "table_input"
												
<%
					}
%>
						input_table_<%=cid %>.nextRow();
					}	
<%
				}
			}
			if(!table_input_map.isEmpty()){
				String tName = "";
				String cName = "";
				for(Object tableName:table_input_map.keySet()){
					tName = TalendTextUtils.removeQuotes(tableName.toString());
					table_map = (HashMap<String,String>)table_input_map.get(tableName);
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
						String multiValues = table_map.get(colName);
%>
						java.util.List list_<%=tName%>_<%=cName%>_<%=cid%> = new java.util.ArrayList();				
<%
						if(multiValues != null && multiValues.indexOf(",") != -1){
    						String[] values = multiValues.split(",");
    						for(int k = 0; k < values.length; k++){
%>
						list_<%=tName%>_<%=cName%>_<%=cid%>.add(<%=values[k]%>);
<%
    						}
    					}else{
%>
						isListObject_<%=cid%> = <%=table_map.get(colName)%>;
						if(isListObject_<%=cid%> instanceof java.util.List){
							list_<%=tName%>_<%=cName%>_<%=cid%>.addAll((java.util.List)isListObject_<%=cid%>);
						}else{
							list_<%=tName%>_<%=cName%>_<%=cid%>.add(<%=table_map.get(colName)%>);
						}
<%						
    					}
					}
%>
					int rowSize_<%=tName%>_<%=cid%> = 0;
<%
					boolean isFirstRow = true;
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
						if(isFirstRow){
%>
						rowSize_<%=tName%>_<%=cid%> = list_<%=tName%>_<%=cName%>_<%=cid%>.size();														
<%
							isFirstRow = false;
						}else{
%>
						if(rowSize_<%=tName%>_<%=cid%>!=list_<%=tName%>_<%=cName%>_<%=cid%>.size()){
							throw new RuntimeException("The row count of column: <%=cName%> in table: <%=tName%> not equals others, please make sure the row count of every columns equal.");
						}					
<%
						}
					}
%>
					table_input_<%=cid %> = tableParameterList_<%=cid%>.getTable(<%=tableName%>);
					table_input_<%=cid %>.appendRows(rowSize_<%=tName%>_<%=cid%>);
					table_input_<%=cid %>.firstRow();
					for(int rowNum_<%=tName%>=0;rowNum_<%=tName%><rowSize_<%=tName%>_<%=cid%>;rowNum_<%=tName%>++){			
<%
					
					for(Object colName: table_map.keySet()){
						cName = TalendTextUtils.removeQuotes(colName.toString());
%>
						table_input_<%=cid %>.setValue(list_<%=tName%>_<%=cName%>_<%=cid%>.get(rowNum_<%=tName%>),<%=colName.toString()%>);// "input_table"
												
<%
					}
%>
						table_input_<%=cid %>.nextRow();
					}	
<%
				}
			}	
%>        
        


        client_<%=cid %>.execute(function_<%=cid %>);
        
<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
	String paramType = schemaMap.get("SAP_ITERATE_OUT_TYPE");	
	String tableName = schemaMap.get("SAP_TABLE_NAME");	
%>
	boolean go_<%=schemaName %> = true;
	
	<%if(paramType.equals("output_table")){%>
		com.sap.mw.jco.JCO.Table table_<%=schemaName %>_<%=cid %> = exportParameterList_<%=cid %>.getTable(<%=tableName %>);
		go_<%=schemaName %> = !table_<%=schemaName %>_<%=cid %>.isEmpty();
	<%}%>
	
	<%if(paramType.equals("table_output")){%>
		com.sap.mw.jco.JCO.Table table_<%=schemaName %>_<%=cid %> = tableParameterList_<%=cid %>.getTable(<%=tableName %>);
		go_<%=schemaName %> = !table_<%=schemaName %>_<%=cid %>.isEmpty();
	<%}%>		
<%	
}
%>

while(<%
boolean firstWhilePart = true;
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
%>
	<%=!firstWhilePart?"||":"" %>go_<%=schemaName %>
<%	
	firstWhilePart = false;
}
%>){

<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
%>
	<%=schemaName %> = null;
<%	
}
%>


<%
for(Map<String, String> schemaMap : schemas) {
	String schemaName = schemaMap.get("SCHEMA");
	String paramType = schemaMap.get("SAP_ITERATE_OUT_TYPE");
	String tableName = schemaMap.get("SAP_TABLE_NAME");	
	String mapping = schemaMap.get("MAPPING");	
	String[] paramNames = null;
	if(mapping != null){
		paramNames = mapping.split(",");
	}	
	IConnection justConn = null; //------->get the right output connection--->to get the columns info
	if(conns != null && conns.size() > 0){
		for(IConnection conn : conns){
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				if(schemaName.equals(conn.getName())){
					justConn = conn;
					break;
				}
			}
		}
	}
%>

<%
//do check1, make sure the field "component setting viewer->View->Connection format" is "row"
if(justConn == null){
%>
    	if (true) {
    		throw new Exception("The connection for schema <%=schemaName %> is with problem, they must be the same name.");
    
    	}
<%
	return stringBuffer.toString();
}
%>
	
<%
	IMetadataTable justMetadata = justConn.getMetadataTable();
	List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
%>
	
<%
//do check2, make sure the field "Schema XpathQuerys" are not empty 
if(paramNames == null || paramNames.length != justColumnList.size()){
%>
    	if (true) {
    		throw new Exception("Please make sure to configure the \"Outputs->Mapping->Schema XpathQuerys\" for schema <%=schemaName %>");    
    	}
<%
	return stringBuffer.toString();
}
%>
	if(go_<%=schemaName %>){
		
		<%if(paramType.equals("output_single")){%>
			go_<%=schemaName %> = false;	
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){    
            %>
            // "output_single"--<%=justColumnList.get(i).getLabel() %>
            <%new AssignUtil().gen(justConn,justColumn,"exportParameterList_"+cid,paramNames[i]);%>
            <%	
            	i++;
            	}
            %>           	
        <%}else if(paramType.equals("output_structure")){%>
        	go_<%=schemaName %> = false;
        	com.sap.mw.jco.JCO.Structure output_structure_<%=justConn.getName() %>_<%=cid %> = exportParameterList_<%=cid %>.getStructure(<%=tableName %>);
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){    
            %>
            // "output_structure"--<%=justColumnList.get(i).getLabel() %>
            <%new AssignUtil().gen(justConn,justColumnList.get(i),"output_structure_"+justConn.getName()+"_"+cid,paramNames[i]);%>
            <%	
            	i++;
            	}
            %> 
		<%}else if(paramType.equals("output_table") || paramType.equals("table_output")){%>
    		if(table_<%=schemaName %>_<%=cid %>.isLastRow()){ //check the flag first
    			go_<%=schemaName %> = false;
    		}        	
    		<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
            <%
                int i = 0;
                for(IMetadataColumn justColumn : justColumnList){  
            %>	
            // "table_output" or "output_table"--<%=justColumnList.get(i).getLabel() %>
            <%new AssignUtil().gen(justConn,justColumnList.get(i),"table_"+schemaName+"_"+cid,paramNames[i]);%>
            <%	
            	i++;
            	}
            %> 	
            if(go_<%=schemaName %>){
            		table_<%=schemaName %>_<%=cid %>.nextRow();
            	}     
            <%
            }
            %>

	}
<%	
}
%>
