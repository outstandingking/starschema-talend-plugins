<%@ jet
	imports="
	java.util.Arrays
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
	
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.utils.TalendTextUtils
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
%>


<%
boolean startIterate = false;
String firstDataConnName = "table_content";

String client = ElementParameterParser.getValue(node, "__CLIENT__");
String userid = ElementParameterParser.getValue(node, "__USERID__");
String password = ElementParameterParser.getValue(node, "__PASSWORD__");
String language = ElementParameterParser.getValue(node, "__LANGUAGE__");
String hostname = ElementParameterParser.getValue(node, "__HOSTNAME__");
String systemnumber = ElementParameterParser.getValue(node, "__SYSTEMNUMBER__");

String serverType = ElementParameterParser.getValue(node,"__SERVERTYPE__");
String systemId = ElementParameterParser.getValue(node,"__SYSTEMID__");
String groupName = ElementParameterParser.getValue(node,"__GROUPNAME__");


// PLSAP related	
String tableName = ElementParameterParser.getValue(node, "__SAP_TABLE_NAME__");	
String functionName = ElementParameterParser.getValue(node, "__SAP_FUNCTION__");
String sapOutputDirectory = ElementParameterParser.getValue(node, "__SAP_OUTPUT_DIRECTORY__");
String whereCondition = ElementParameterParser.getValue(node, "__WHERE_CONDITION__");
String outputFileName = tableName; // concat cid
boolean useCompression = ("true").equals(ElementParameterParser.getValue(node,"__COMPRESSION__"));


List<Map<String, String>>  sapTableColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SAP_TABLE_COLUMNS__");

boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
%>

/* Connect to SAP */
com.sap.conn.jco.JCoDestination dest_<%=cid%> = null;
<%if(useExistingConn){%>	
	dest_<%=cid%> = (com.sap.conn.jco.JCoDestination)globalMap.get("conn_<%=connection %>");
<%}else{%>
	org.talend.sap.TalendDestinationData destinationData_<%=cid%> = null;
	<%if("ApplicationServer".equals(serverType)){%>
		destinationData_<%=cid%> = new org.talend.sap.TalendDestinationData(<%=client%>,
																			<%=userid%>,
																			<%=password%>,
																			<%=language%>,
																			<%=hostname%>,
																			<%=systemnumber%>);
	<%}else{%>			
		destinationData_<%=cid%> = new org.talend.sap.TalendDestinationData(<%=client%>,
																			<%=userid%>,
																			<%=password%>,
																			<%=language%>,
																			<%=hostname%>,
																			<%=systemId %>,
				            				 								<%=groupName%> );
	<%}%>
    org.talend.sap.TalendDestinationDataProvider destinationDataProvider_<%=cid%> = org.talend.sap.TalendDestinationDataProvider.getInstance();
    destinationDataProvider_<%=cid%>.addDestination("SAP_SERVER_<%=cid%>", destinationData_<%=cid%>);
    try {
    	com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(destinationDataProvider_<%=cid%>);
	} catch (java.lang.IllegalStateException ex) {
		//ignore if the provider already registered.
    }
    dest_<%=cid%> = com.sap.conn.jco.JCoDestinationManager.getDestination("SAP_SERVER_<%=cid%>");

<%}%>  
		
/* switch to JCO Context */
try { 
    // Begins the stateful call sequence for calls to the specified destination.
	com.sap.conn.jco.JCoContext.begin(dest_<%=cid%>);

	com.sap.conn.jco.JCoFunction function_<%=cid %> = dest_<%=cid%>.getRepository().getFunction( "<%= functionName %>" );

	if(function_<%=cid %> == null)
    	throw new RuntimeException("<%= functionName %> not found in SAP.");

	function_<%=cid %>.getImportParameterList().setValue( "TARGET", <%=sapOutputDirectory %> ); // table name
	function_<%=cid %>.getImportParameterList().setValue( "FILE_NAME", <%= outputFileName %> ); // table name

	com.sap.conn.jco.JCoTable fields_<%=cid %> = function_<%=cid %>.getTableParameterList().getTable("TABLE_FIELD");

<%
  for (int i = 0; i < sapTableColumns.size(); i++) {
    Map<String, String> line = sapTableColumns.get(i);
   	 %>
	fields_<%=cid %>.appendRows(1);
	fields_<%=cid %>.setValue("TABNAME", <%= tableName %> );
	fields_<%=cid %>.setValue("FIELDNAME", <%= line.get("FIELD_NAME") %> );

 	System.out.println("Adding SAP Column: " + <%= line.get("FIELD_NAME") %> );
<%
  }
%>

	// Add where condition

	// Call RFC
	function_<%=cid%>.execute(dest_<%=cid%>);
  


	
